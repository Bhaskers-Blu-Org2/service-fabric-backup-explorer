# coding: utf-8

"""
    Service Fabric Reliable Collection Backup Explorer OpenApi

    OpenApi spec of [service-fabric-backup-explorer](http://github.com/Microsoft/service-fabric-backup-explorer).  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BackupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_location': 'str',
        'timeout_in_secs': 'int',
        'cancellation_token_in_secs': 'int'
    }

    attribute_map = {
        'backup_location': 'BackupLocation',
        'timeout_in_secs': 'TimeoutInSecs',
        'cancellation_token_in_secs': 'CancellationTokenInSecs'
    }

    def __init__(self, backup_location=None, timeout_in_secs=None, cancellation_token_in_secs=None):  # noqa: E501
        """BackupRequest - a model defined in Swagger"""  # noqa: E501
        self._backup_location = None
        self._timeout_in_secs = None
        self._cancellation_token_in_secs = None
        self.discriminator = None
        if backup_location is not None:
            self.backup_location = backup_location
        if timeout_in_secs is not None:
            self.timeout_in_secs = timeout_in_secs
        if cancellation_token_in_secs is not None:
            self.cancellation_token_in_secs = cancellation_token_in_secs

    @property
    def backup_location(self):
        """Gets the backup_location of this BackupRequest.  # noqa: E501

        Path of the location to save backup  # noqa: E501

        :return: The backup_location of this BackupRequest.  # noqa: E501
        :rtype: str
        """
        return self._backup_location

    @backup_location.setter
    def backup_location(self, backup_location):
        """Sets the backup_location of this BackupRequest.

        Path of the location to save backup  # noqa: E501

        :param backup_location: The backup_location of this BackupRequest.  # noqa: E501
        :type: str
        """

        self._backup_location = backup_location

    @property
    def timeout_in_secs(self):
        """Gets the timeout_in_secs of this BackupRequest.  # noqa: E501

        Timeout for backup in seconds  # noqa: E501

        :return: The timeout_in_secs of this BackupRequest.  # noqa: E501
        :rtype: int
        """
        return self._timeout_in_secs

    @timeout_in_secs.setter
    def timeout_in_secs(self, timeout_in_secs):
        """Sets the timeout_in_secs of this BackupRequest.

        Timeout for backup in seconds  # noqa: E501

        :param timeout_in_secs: The timeout_in_secs of this BackupRequest.  # noqa: E501
        :type: int
        """

        self._timeout_in_secs = timeout_in_secs

    @property
    def cancellation_token_in_secs(self):
        """Gets the cancellation_token_in_secs of this BackupRequest.  # noqa: E501

        Setting of cancellation token in secs for taking backup  # noqa: E501

        :return: The cancellation_token_in_secs of this BackupRequest.  # noqa: E501
        :rtype: int
        """
        return self._cancellation_token_in_secs

    @cancellation_token_in_secs.setter
    def cancellation_token_in_secs(self, cancellation_token_in_secs):
        """Sets the cancellation_token_in_secs of this BackupRequest.

        Setting of cancellation token in secs for taking backup  # noqa: E501

        :param cancellation_token_in_secs: The cancellation_token_in_secs of this BackupRequest.  # noqa: E501
        :type: int
        """

        self._cancellation_token_in_secs = cancellation_token_in_secs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
